name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script_stop: true
          command_timeout: 30m
          script: |
            echo "Starting deployment..."
            
            # Устанавливаем nvm и Node.js если их нет
            if [ ! -d "$HOME/.nvm" ]; then
              echo "Installing nvm and Node.js..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
              nvm install 18
            fi
            
            # Активируем Node.js 18
            echo "Activating Node.js 18..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 18
            
            # Проверяем и создаем директории если нужно
            PROJECT_DIR="/home/$USER/nms2"
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Creating project directory..."
              mkdir -p "$PROJECT_DIR"
              cd "$PROJECT_DIR"
              git clone https://github.com/supernarkis/nms2.git .
            else
              echo "Updating existing project..."
              cd "$PROJECT_DIR"
              git fetch origin
              git reset --hard origin/main
            fi
            
            # Проверяем и устанавливаем Python если нужно
            if ! command -v python3 &> /dev/null; then
              echo "Installing Python..."
              sudo apt-get update
              sudo apt-get install -y python3 python3-venv
            fi
            
            # Пересоздаем виртуальное окружение
            echo "Setting up virtual environment..."
            cd "$PROJECT_DIR"
            sudo rm -rf env
            sudo python3 -m venv env
            sudo chown -R root:root env
            source env/bin/activate
            
            # Проверяем что Python установлен в виртуальном окружении
            if [ ! -f "env/bin/python" ]; then
              echo "Error: Python not found in virtual environment!"
              exit 1
            fi
            
            # Обновляем бэкенд
            echo "Updating backend..."
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Настраиваем systemd с переменными окружения
            echo "Configuring systemd service..."
            sudo mkdir -p /etc/systemd/system/notes-app.service.d
            
            # Создаем override файл с переменными окружения
            echo '[Service]' | sudo tee /etc/systemd/system/notes-app.service.d/override.conf > /dev/null
            echo 'Environment="GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}"' | sudo tee -a /etc/systemd/system/notes-app.service.d/override.conf > /dev/null
            echo 'Environment="GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"' | sudo tee -a /etc/systemd/system/notes-app.service.d/override.conf > /dev/null
            
            # Обновляем и перезапускаем сервис
            echo "Restarting service..."
            sudo cp notes-app.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl restart notes-app
            
            # Проверяем статус сервиса и логи при ошибке
            if ! sudo systemctl is-active --quiet notes-app; then
              echo "Error: Service failed to start. Checking logs..."
              echo "=== Service Status ==="
              sudo systemctl status notes-app
              echo "=== Last 50 lines of journal ==="
              sudo journalctl -u notes-app -n 50
              exit 1
            fi
            
            # Собираем и обновляем фронтенд
            echo "Building frontend..."
            cd frontend
            npm install
            npm run build
            
            # Обновляем файлы на веб-сервере
            echo "Updating web server files..."
            if [ -d "dist" ]; then
              sudo rm -rf /var/www/html/*
              sudo cp -r dist/* /var/www/html/
              sudo chown -R www-data:www-data /var/www/html/
              echo "Deployment completed successfully!"
            else
              echo "Error: dist directory not found!"
              exit 1
            fi
            
            # Проверяем работоспособность сервисов
            echo "Checking services availability..."
            
            # Функция для проверки доступности endpoint'а
            check_endpoint() {
              local url=$1
              local max_attempts=$2
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "Checking $url (attempt $attempt/$max_attempts)..."
                if curl -s -k -f "$url" > /dev/null; then
                  echo "$url is available!"
                  return 0
                fi
                echo "Service not ready yet, waiting..."
                sleep 5
                attempt=$((attempt + 1))
              done
              
              # При ошибке выводим дополнительную диагностику
              echo "Error: $url is not available after $max_attempts attempts"
              echo "Curl verbose output:"
              curl -v -k "$url"
              return 1
            }
            
            # Проверяем бэкенд (API endpoint)
            if ! check_endpoint "https://notes.narkis.ru/api/auth/check" 6; then
              echo "Backend health check failed!"
              echo "=== Service Status ==="
              sudo systemctl status notes-app
              echo "=== Last 50 lines of journal ==="
              sudo journalctl -u notes-app -n 50
              exit 1
            fi
            
            # Проверяем фронтенд (главная страница)
            if ! check_endpoint "https://notes.narkis.ru/" 6; then
              echo "Frontend health check failed!"
              echo "=== Nginx Status ==="
              sudo systemctl status nginx
              echo "=== Nginx Error Log ==="
              sudo tail -n 50 /var/log/nginx/error.log
              exit 1
            fi
            
            echo "All services are up and running!" 